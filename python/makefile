MAKEFLAGS += -j20 #parallel compilation

#files that need compilin'
OBJDIR = ../bin
SRCDIR = ../src
SRCFILES = $(wildcard $(SRCDIR)/atm/*.cpp) $(wildcard $(SRCDIR)/*.cpp) 

NSRCFILES = $(SRCFILES) 
NOBJFILES    := $(filter %.o, $(NSRCFILES:%.cpp=%.cuda.o)       $(NSRCFILES:%.cu=%.cuda.o      ))
NOBJFILES    := $(subst $(SRCDIR),$(OBJDIR),$(NOBJFILES))
NOBJFILESDBG := $(filter %.o, $(NSRCFILES:%.cpp=%.cuda.debug.o) $(NSRCFILES:%.cu=%.cuda.debug.o))
NOBJFILESDBG := $(subst $(SRCDIR),$(OBJDIR),$(NOBJFILESDBG))

#include directories
BOOSTDIR=-I/home/mike/Documents/Utilities/boost_1_73_0/
EIGENDIR=-I/home/mike/Documents/Utilities/eigen_git/
IDIR=-I$(SRCDIR) $(BOOSTDIR) $(EIGENDIR)

# GNU Compiler
CC=g++
LIBS=-lm 
MPFLAGS=-fopenmp
#OFLAGS=-O0 -g -Wall -Wextra -Wno-deprecated-copy #last one suppresses warnings generated by Eigen
OFLAGS=-O3 -march=native -DNDEBUG


# Nvidia CUDA Compiler
# Nvidia CUDA Compiler
NCC=nvcc -Xcompiler -fPIC -Xcudafe --display_error_number #--disable-warnings
NFLAGS=-x cu -D RT_FLOAT              -D EIGEN_NO_CUDA                -D BOOST_NO_CUDA
#            ^^^^32-bit calculation   ^^^^^ disable Eigen on device   ^^^^^ disable Boost on device
#                                           (some modifications to    (added this flag by hand as a wrapper
#                                            Eigen were needed to      around BOOST_GPU_ENABLED in
#                                            get this to work)         boost/config/compiler/nvcc.hpp)
NIDIR=$(IDIR) \
      -L$(CUDA_HOME)/lib64/ \
      -I$(CUDA_HOME)/samples/common/inc/
NLIBS=-lm -lcudart -lcusolver -lcublas
NOBASEFLAGS= -O3 -DNDEBUG -lineinfo -arch sm_61 --use_fast_math #--maxrregcount 43
# if we are CUDA 11, link time optimization is possible
ifeq ($(shell nvcc --version | grep -o 'release.*' | cut -f2 -d' ' | cut -f1 -d.),11)
CUDA_DLTO=true
NOFLAGS=$(NOBASEFLAGS) -dlto
else
NOFLAGS=$(NOBASEFLAGS)
endif
NDBGFLAGS=-O0 -g -lineinfo

py_corona_sim_cpu: $(OBJFILES)
	@mkdir -p build

# shared library --- python can't find this at runtime
#	$(CC) -Wall -shared -std=c++17 -fPIC \
	-Wl,-soname,libobservationfit.so \
	$(SRCFILES) \
	wrapper.cpp \
	$(IDIR) $(LIBS) $(MPFLAGS) $(OFLAGS) \
	 -o build/libobservation_fit.so

	rm -f build/libobservation_fit.a

	ar rs build/libobservation_fit.a $(OBJFILES)
	ranlib build/libobservation_fit.a

	python setup_corona_sim.py build_ext --inplace

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@echo "compiling $<..."
	@mkdir -p '$(@D)'
	@$(CC) -c $< -std=c++17 -fPIC $(IDIR) $(LIBS) $(OFLAGS) -o $@

py_corona_sim_gpu: $(NOBJFILES)
	@mkdir -p build

	$(NCC) -dlink $(NOBJFILES) $(NIDIR) $(NLIBS) $(NOFLAGS) \
	-o build/observation_fit_wrapper_gpu_device.o

# shared library --- python can't find this at runtime
#	$(CC) -shared -Wl,-soname,libobservationfit.so \
	-o build/libobservation_fit.so \
	build/observation_fit_gpu_host.o \
	build/observation_fit_gpu_device.o -lc

	rm -f build/libobservation_fit.a

	ar rs build/libobservation_fit.a \
	build/observation_fit_wrapper_gpu_device.o \
	$(NOBJFILES)

	ranlib build/libobservation_fit.a

	python setup_corona_sim.py build_ext --inplace -RT_FLOAT

$(OBJDIR)/%.cuda.o: $(SRCDIR)/%.cpp
	@echo "compiling $<..."
	@mkdir -p '$(@D)'
	@$(NCC) $(NFLAGS) $(NIDIR) $(NLIBS) $(NOFLAGS) -dc $< -o $@

obs_fit_test_gpu: $(NOBJFILESDBG)
	$(NCC) $(NFLAGS) $(NIDIR) $(NLIBS) $(NDBGFLAGS) -dc test/obs_fit_test.cpp -o ../bin/obs_fit_test.cuda.debug.o
	@echo "linking ..."
	@$(NCC) $(NOBJFILESDBG) ../bin/obs_fit_test.cuda.debug.o $(NIDIR) $(NLIBS) $(NDBGFLAGS) -o ./test/obs_fit_test.x

$(OBJDIR)/%.cuda.debug.o: $(SRCDIR)/%.cpp
	@echo "compiling $<..."
	@mkdir -p '$(@D)'
	@$(NCC) $(NFLAGS) $(NIDIR) $(NLIBS) $(NDBGFLAGS) -dc $< -o $@



clean_all:
	rm -rf *.cpp build* *.so ../bin/* $(NOBJFILES) $(NOBJFILESDBG)

clean_python:
	rm -rf build* *.so *.cpp
