// things to improve/change in code

Fitting Routine
---------------
--explore/compare quadratic fit to best-fit basin vs. nested sampling
--how different are retrievals using high-res grid?
--need utilities for fitting multiple files/observations
--reproduce 2018 paper results


Maintanance
-----------
--remove transmission object; this is superseded by lineshape_tracker
--fix transmission so that it is specified inside emission


Validation
----------
--why does multiplet code differ from singlet by 5% for Lyman alpha?
--comparison with anderson
--comparison with chaufray
--any analytic test case for 3D? Maybe something asymptotic from Holstein? (plane parallel comp worked)
--alternate source function calculation guaranteed to populate all elements of matrix?


New functionality
-----------------
--add 3D fully spherical geometry
--treat H ly alpha and Ly beta as doublet
  -- Doppler width @ 200 K = 6.2e-4 (lambda / 102.57 nm) (T / 200 K)^0.5
  -- 8 mA at Ly alpha 
     fine structure wavelengths are     121.567364 nm
                                        121.566823 nm
                                        separation of 5.4 mA 
                                        overlapping lines have 10% lower absorption than equivalent singlet at line center, wider wings
  -- 6 mA at Ly beta
     fine structure wavelengths are     102.572182505
                                        102.572296565
                                        separation of 1.1 mA
                                        difference of <1% from equivalent singlet
--deuterium and hot H physical densities
--O I 102.6 nm radiance calculation 
  --requires line blending
  --may require frequency redistribution
--include single-scattering anisotropy


UIUC collaboration
------------------
--think more about normalization effects on degeneracy


Small improvements
------------------
--improve treatment of planetary shadow
  --double up voxels on the shadow boundary, treating the inside and outside seperately
--new IPH model? Very slow to evaluate quemerais model
--HDF5 save files instead of ASCII


Longer-term
-----------
--more realistic exosphere (Vidal-Madjar or similar)
--frequency redistribution (needs some refactoring of emission object)
--RT anisotropy??
--new scheme for ray distribution: https://www.sciencedirect.com/science/article/pii/S0097849312000568
  --computing solid angle associated with each ray may be difficult with this scheme
--Efficient Voigt line functions: https://yorkspace.library.yorku.ca/xmlui/bitstream/handle/10315/10172/The%20Voigt%20and%20complex%20error%20functions.pdf;jsessionid=E049E45AB37B74D487ADC7DEAB691A2F?sequence=1
--Fast Multipole method for Source Function calculation?
  --A short course on fast multipole methods: https://math.nyu.edu/faculty/greengar/shortcourse_fmm.pdf
  --A kernel-independent adaptive fast multipole algorithm in two and three dimensions: https://web.stanford.edu/~lexing/fmm.pdf
--Some other potential solution methods to employ:
  --A fast algorithm for radiative transport in isotropic media: https://arxiv.org/pdf/1610.00835.pdf
  --Fast algorithms for integral formulations of steady-state radiative transfer equation: https://arxiv.org/pdf/1802.03061.pdf
  --Fast direct solvers for integral equations in complex three-dimensional domains: https://amath.colorado.edu/faculty/martinss/2014_CBMS/Biblio/2009_acta.pdf
  --A FAST DIRECT SOLVER FOR STRUCTURED LINEAR SYSTEMS BY RECURSIVE SKELETONIZATION: https://arxiv.org/pdf/1110.3105.pdf
  --Solving Inverse Problems with Deep Learning: https://drive.google.com/file/d/1uVZ_obbchNWGV50qNTZXwbAymDuLLaWF/view
  --RESONANCE LINE TRANSFER CALCULATIONS BY DOUBLING THIN LAYERS: http://articles.adsabs.harvard.edu/pdf/1989ApJ...346..481Y
--Idea to improve CUDA kernel efficiency
  -- right now los calculations are done with one CUDA block computing all rays departing a single voxel, this could lead to very broad memory access patterns (slow)
  -- instead, group voxels into NxN(xN) squares / cubes and have each block process one group (one kernel per voxel), looping over rays
     b/c group is compact, rays look similar, memory access and thread divergence problems will be minimized
     swizzling / morton ordering grid coordinates would put voxels closer together in memory: https://enoki.readthedocs.io/en/master/morton.html

			       ^     ^
		     ---------/-----/
		     |  |    /|    /|
		     -------/-----/--
		     |  |  x  |  x  |
		     ----------------
		     |  |     |     |
		     ----------------
  -- same block grouping technique could be used to group 2D image coordinates into blocks before running LOS integrals through atmosphere
--automatic differentiation could give derivatives on output parameters

Old/less useful ideas:
  --use monotone cubic interpolation in brightness calculation: 
    --implement this: http://articles.adsabs.harvard.edu/pdf/1990A%26A...239..443S
    -- or switch to GSL: https://www.gnu.org/software/gsl/doc/html/interp.html#d-higher-level-interface
  --fix texture interpolation implementation(?) 
    --likely not worth it given that interpolation is not the most expensive operation and texture interps have only 9-bit accuracy
  --fast exp calculation http://gallium.inria.fr/blog/fast-vectorizable-math-approx/ 
    --CUDA already uses hardware exp2, not much slower than a single FLOP multiply
  --move finite-difference derivative calculation inside observation_fit
    --not needed for many fitting techniques
    --likely to significantly slow down CUDA implementation due to shared memory occupancy
  
## 
## DONE!
##

xx--compute voxel densities as average over zone rather than typical value
xx--switch from tabulated holstein T to computing it just-in-time as line integrals are traversed
    (smells like frequency redistribution;
     should be relatively easy, add line profile to tau_tracker)
xx--add uniform ray method
xx--OBSOLETE due to line profile calculation
    incoroporate CO2 absorption in holstein function instead of midpoint approximation 
    (needs 2d holstein interps with absorption)
xx--compare with pratik brightness values (they match!)
xx--fix CUDA implementation, brightness + matrix
xx--lots of optimization (30 Oct 2020) >10x speedup.
xx  --reduced memory usage of lineshape_tracker dramatically
    --switch to shared memory for brightness calc
    --use-fast-math works now
    --converted literals to float (3x speedup!)
    --reduced line samples and wavelength range from 12/5 to 6/4 in lineshape_tracker
    --separate influence and brightness lineshape_tracker calculation
xx--profile+optimize GPU code (texture memory likely to be last possible big improvement)
    --replacing atmospheric variables (density, cross section, source function) with texture units on device may help
      --these objects would pre-fecth in a volume around the current index, 
      --would need to rewrite device-side voxel_vector interface, adding a texture object
      --texture objects need to know about the grid structure, which is currently not known to emission objects.
      --this would replace linear interpolation with hardware interpolation
      --need fast coordinate point finders? (right now this is done brute force)
xx--32 bit vs 64 bit differences in code output? --- these appear to be mostly gone
xx--temperature differences with SZA
xx--quemerais IPH background (for IUVS apoapse images)
xx----In temp_asym:
  xx--switch to constant CO2 at 80km / rmin rather than rexo
  xx--switch to constant rmax instead of min nHexo
